apply plugin: 'eclipse'
apply plugin: 'signing'

defaultTasks 'rar'

configurations {
   compile {
      transitive = true
   }
   provided
}

sourceSets {
  main {
    compileClasspath = compileClasspath + configurations.provided
  }
}

dependencies {
  provided "javax.validation:validation-api:$validationVersion"
  provided "org.jboss.ironjacamar:ironjacamar-spec-api:$ijVersion"
  compile "io.vertx:vertx-core:$vertxVersion"
  runtime "io.vertx:vertx-hazelcast:$vertxVersion"
  testCompile "io.vertx:vertx-platform:$vertxVersion"
  testCompile "org.jboss.ironjacamar:ironjacamar-arquillian-embedded:$ijVersion"
  testCompile "org.jboss.ironjacamar:ironjacamar-arquillian-embedded-byteman:$ijVersion"
  testCompile "org.jboss.ironjacamar:ironjacamar-common-api:$ijVersion"
  testCompile "org.jboss.ironjacamar:ironjacamar-common-impl:$ijVersion"
  testCompile "org.jboss.ironjacamar:ironjacamar-common-spi:$ijVersion"
  testCompile "org.jboss.ironjacamar:ironjacamar-core-api:$ijVersion"
  testCompile "org.jboss.ironjacamar:ironjacamar-core-impl:$ijVersion"
  testCompile "org.jboss.ironjacamar:ironjacamar-depchain:$ijVersion"
  testCompile "org.jboss.ironjacamar:ironjacamar-deployers-common:$ijVersion"
  testCompile "org.jboss.ironjacamar:ironjacamar-deployers-fungal:$ijVersion"
  testCompile "org.jboss.ironjacamar:ironjacamar-embedded:$ijVersion"
  testCompile "org.jboss.ironjacamar:ironjacamar-test-eis:$ijVersion"
  testCompile "org.jboss.ironjacamar:ironjacamar-validator:$ijVersion"
  testCompile "junit:junit:$junitVersion"
  testCompile files("${System.properties['java.home']}/../lib/tools.jar") 
}

javadoc {
  source = sourceSets.main.allJava
  classpath = sourceSets.main.compileClasspath + configurations.provided
}

task sourceJar(type: Jar) {
  description = 'Builds a source jar artifact suitable for maven deployment.'
  classifier = 'sources'
  from sourceSets.main.java
}

task javadocJar(type: Jar) {
  description = 'Builds a javadoc jar artifact suitable for maven deployment.'
  classifier = 'javadoc'
  from javadoc.destinationDir
}
javadocJar.dependsOn javadoc

build.dependsOn sourceJar, javadocJar

artifacts {
  archives sourceJar, javadocJar
}

jar.baseName = "${modname}"
javadocJar.baseName = "${modname}"
sourceJar.baseName = "${modname}"

install {
  repositories.mavenInstaller {
    configurePom(pom)
  }
}

task rar( type: Zip, dependsOn: 'build', description: 'Package the resource adapter .rar file') {
  group = 'JCA'
  description = "Assembles a resource adapter .rar file"
  destinationDir = project.file('build/libs')
  archiveName = "${modname}-${version}.rar"
  from configurations.runtime
  from "build/libs/${modname}-${version}.jar"
}

test.onlyIf {!project.hasProperty("skipTest")}

install.dependsOn rar

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// maven task configuration

if (!hasProperty('sonatypeUsername')) {
	ext.sonatypeUsername = ''
}
if (!hasProperty('sonatypePassword')) {
	ext.sonatypePassword = ''
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

signing {
	required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
	sign configurations.archives
}

uploadArchives {
	group 'build'
	description = "Does a maven deploy of archives artifacts"

	repositories {
		mavenDeployer {
                        // setUniqueVersion(false)

			configuration = configurations.archives

			repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
				authentication(userName: sonatypeUsername, password: sonatypePassword)
			}

			snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
				authentication(userName: sonatypeUsername, password: sonatypePassword)
			}

			if (isReleaseVersion) {
				beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
			}

			configurePom(pom)
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// configuration methods

def configurePom(def pom) {
  pom.project {
    name "Vertx JCA Adaptor"
    description 'JCA Resource Adaptor used to communicate between Vert.x and JavaEE application server'
    inceptionYear '2013'
    packaging "rar"

    properties {
      setProperty('project.build.sourceEncoding', 'UTF8')
    }

    url 'https://github.com/vert-x/jca-adaptor'

    developers {
      developer {
        id 'gaol'
        name 'Lin Gao'
        email 'aoingl@gmail.com'
      }
    }

    scm {
      url 'https://github.com/vert-x/jca-adaptor'
      connection 'scm:git:git@github.com:vert-x/jca-adaptor.git'
      developerConnection 'scm:git:git@github.com:vert-x/jca-adaptor.git'
    }

    licenses {
      license {
        name 'The Apache Software License, Version 2.0'
        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        distribution 'repo'
      }
    }
  }
  pom.withXml { root ->
    def children = root.asNode().children()
    def versionIndex = children.indexOf(children.find {it.name().localPart == 'version'})
    children.add(versionIndex + 1, new Node(null, 'packaging', 'rar'))
  }
}
